generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SalaryEntry {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  country             String?
  subreddit           String?
  age                 Int?
  education           String?
  workExperience      Int?
  civilStatus         String?
  dependents          Int?
  sector              String?
  employeeCount       String?
  multinational       Boolean?
  jobTitle            String?
  jobDescription      String?
  seniority           Int?
  officialHours       Float?
  averageHours        Float?
  shiftDescription    String?
  onCall              String?
  vacationDays        Int?
  currency            String?   @default("EUR")
  grossSalary         Float?
  netSalary           Float?
  netCompensation     Float?
  mobility            String?
  thirteenthMonth     String?
  mealVouchers        Float?
  ecoCheques          Float?
  groupInsurance      String?
  otherInsurances     String?
  otherBenefits       String?
  workCity            String?
  commuteDistance     String?
  commuteMethod       String?
  commuteCompensation String?
  teleworkDays        Float?
  dayOffEase          String?
  stressLevel         String?
  reports             Int?
  source              String?
  sourceUrl           String?
  extraNotes          String?
  isManualEntry       Boolean   @default(true)
  lastCommentsFetch   DateTime?
  ownerToken          String?
  editableUntil       DateTime?
  comments            Comment[]

  @@index([ownerToken])
}

model Comment {
  id            Int         @id @default(autoincrement())
  externalId    String?
  body          String
  author        String?
  score         Int?        @default(0)
  createdAt     DateTime    @default(now())
  depth         Int         @default(0)
  parentId      Int?
  salaryEntryId Int
  parent        Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]   @relation("CommentReplies")
  salaryEntry   SalaryEntry @relation(fields: [salaryEntryId], references: [id], onDelete: Cascade)

  @@index([salaryEntryId])
  @@index([parentId])
}

model Report {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String
  type        ReportType
  status      ReportStatus @default(TODO)
  priority    Priority     @default(MEDIUM)
  trackingId  String       @unique
  email       String?
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExchangeRate {
  id        Int      @id @default(autoincrement())
  currency  String   @unique
  rate      Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([currency])
}

enum ReportType {
  BUG
  FEATURE
  IMPROVEMENT
}

enum ReportStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
